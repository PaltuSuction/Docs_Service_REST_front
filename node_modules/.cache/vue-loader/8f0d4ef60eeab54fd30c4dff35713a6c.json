{"remainingRequest":"/home/paltus/PycharmProjects/Docs_Service_REST_v2/tablegenfront/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/paltus/PycharmProjects/Docs_Service_REST_v2/tablegenfront/src/components/AllTables.vue?vue&type=style&index=0&id=617efc66&scoped=true&lang=css&","dependencies":[{"path":"/home/paltus/PycharmProjects/Docs_Service_REST_v2/tablegenfront/src/components/AllTables.vue","mtime":1589327930316},{"path":"/home/paltus/PycharmProjects/Docs_Service_REST_v2/tablegenfront/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/paltus/PycharmProjects/Docs_Service_REST_v2/tablegenfront/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/paltus/PycharmProjects/Docs_Service_REST_v2/tablegenfront/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/paltus/PycharmProjects/Docs_Service_REST_v2/tablegenfront/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/paltus/PycharmProjects/Docs_Service_REST_v2/tablegenfront/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLnRhYmxlLWNhcmQgewogICAgd2lkdGg6IDQwdnc7CiAgICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgICBtYXJnaW46IGF1dG87CiAgICBtYXJnaW4tdG9wOiAzMHB4Owp9Ci5hY3Rpb24tYnV0dG9uIHsKICAgIG1hcmdpbi1yaWdodDogMTBweDsKICAgIG1hcmdpbi1sZWZ0OiAxMHB4Owp9Cg=="},{"version":3,"sources":["AllTables.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"AllTables.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div class=\"all-tables\">\n        <h2>Созданные ведомости</h2>\n        <div style=\"text-align: center\">\n            <b-card v-for=\"table in all_author_tables\" class=\"table-card\" :key=\"table.table_id\">\n                <b-card-title>\n                    <b>{{table.table_name}}, группа {{table.table_group_number}}</b>\n                </b-card-title>\n               <b-card-body style=\"text-align: left\">\n                   <b>Кафедра:</b> {{table.table_department}}<br/>\n                   <b>Направление:</b> {{ store.state.direction_decryption[table.table_direction ]}} <br/>\n                   <b>Создание:</b> {{table.table_created_at}} <br/>\n                   <b>Последнее редактирование:</b> {{table.table_updated_at}} <br/>\n               </b-card-body>\n               <b-card-footer>\n                   <b-btn squared variant=\"outline-dark\" class=\"action-button\" @click=\"edit_table(table.id)\">Редактировать</b-btn>\n                   <b-btn squared variant=\"outline-dark\" class=\"action-button\" @click=\"delete_table(table.id)\">Удалить</b-btn>\n                   <b-btn squared variant=\"outline-dark\" class=\"action-button\" @click=\"create_document(table.id, table.table_name, table.table_group_number)\">Скачать файл (.xls)</b-btn>\n               </b-card-footer>\n            </b-card>\n        </div>\n    </div>\n\n</template>\n\n<script>\n    import axios from 'axios'\n    import store from '../store'\n    import router from '../router/index'\n    import TableEditView from \"../views/TableEditView\";\n\n    export default {\n        name: \"AllTables\",\n        components: {\n            TableEditView\n        },\n        data() {\n            return{\n                store: store,\n                all_author_tables: [],\n            }\n        },\n        methods: {\n            fetch_tables_info: function () {\n                let data = {'action': 'get_all', params: {'author-token': store.state.token}}\n                axios({url: 'http://localhost:6060/api/table_creator/', data: data, method: 'POST'})\n                .then(resp => {\n                    if (resp.data.result === 'ok') {\n                        this.all_author_tables = []\n                        for (let table of resp.data.params.all_author_tables) {\n                            let author_table = {}\n                            author_table['id'] = table['id']\n                            author_table['table_name'] = table['table_name']\n                            author_table['table_department'] = table['table_department']\n                            author_table['table_direction'] = table['table_direction']\n                            author_table['table_group_number'] = table['table_group_number']\n                            author_table['table_created_at'] = this.get_correct_date(table['table_created_at'])\n                            author_table['table_updated_at'] = this.get_correct_date(table['table_updated_at'])\n                            this.all_author_tables.push(author_table)\n                        }\n                    } else {\n                        console.log('Ошибка при загрузке списка таблиц')\n                    }\n                })\n\n            },\n            edit_table: function (table_id) {\n                store.state.selected_table_id = table_id\n                router.push('/edit_table')\n            },\n            delete_table: function (table_id) {\n                let data = {'action': 'delete_table', 'params': {'table_id': table_id}}\n                axios({url: 'http://localhost:6060/api/table_creator/', data: data, method: 'POST'})\n                .then(resp => {\n                    if (resp.data.result === 'ok') {\n                        this.fetch_tables_info()\n                        this.make_toast('Удаление', 'Таблица удалена')\n                    }\n                    else {\n                        console.log(resp.data.params.message)\n                    }\n                })\n            },\n            create_document: function (table_id, table_name, group_number) {\n                let data = {'action': 'create_document', 'params': {'table_id': table_id}}\n                axios({url: 'http://localhost:6060/api/table_creator/', data: data, method: 'POST', responseType: 'blob'})\n                    .then(resp => {\n                             console.log(resp)\n                             var fileURL = window.URL.createObjectURL(new Blob([resp.data]));\n                             var fileLink = document.createElement('a');\n                             fileLink.href = fileURL;\n                             let file_name = table_name + '_' + group_number + '.xls'\n                             fileLink.setAttribute('download', file_name);\n                             document.body.appendChild(fileLink);\n                             fileLink.click();\n                    })\n                .catch(error => (console.log(error)))\n            },\n            // Additional methods\n            get_correct_date: function (date_string) {\n                 let dateObj = new Date(date_string)\n                 let month = store.state.month_names[dateObj.getMonth()];\n                 let day = String(dateObj.getDate()).padStart(2, '0');\n                 let year = dateObj.getFullYear();\n                 let hour = dateObj.getHours();\n                 let minutes = String(dateObj.getMinutes()).padStart(2, '0')\n                 return hour + ':' + minutes + ', ' + day + ' ' + month + ', ' + year\n            },\n            make_toast: function (event_type, message, append=false) {\n                this.$bvToast.toast(message, {\n                    title: event_type,\n                    autoHideDelay: 3000,\n                    appendToast: append\n                })\n            },\n        },\n        created() {\n            this.fetch_tables_info()\n        }\n    }\n</script>\n\n<style scoped>\n    .table-card {\n        width: 40vw;\n        position: relative;\n        margin: auto;\n        margin-top: 30px;\n    }\n    .action-button {\n        margin-right: 10px;\n        margin-left: 10px;\n    }\n</style>"]}]}