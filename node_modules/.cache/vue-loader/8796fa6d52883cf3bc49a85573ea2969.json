{"remainingRequest":"/home/paltus/PycharmProjects/Docs_Service_REST_v2/tablegenfront/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/paltus/PycharmProjects/Docs_Service_REST_v2/tablegenfront/src/components/TableGenerator.vue?vue&type=style&index=0&id=15ff9a55&scoped=true&lang=css&","dependencies":[{"path":"/home/paltus/PycharmProjects/Docs_Service_REST_v2/tablegenfront/src/components/TableGenerator.vue","mtime":1589052296339},{"path":"/home/paltus/PycharmProjects/Docs_Service_REST_v2/tablegenfront/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/paltus/PycharmProjects/Docs_Service_REST_v2/tablegenfront/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/paltus/PycharmProjects/Docs_Service_REST_v2/tablegenfront/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/paltus/PycharmProjects/Docs_Service_REST_v2/tablegenfront/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/paltus/PycharmProjects/Docs_Service_REST_v2/tablegenfront/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoudGFibGUtd3JhcHBlciB7CiAgICBtYXJnaW4tdG9wOiAzMHB4Owp9Ci50YWJsZS1ncmFkZS1jZWxsIHsKICAgIG1pbi13aWR0aDogNTBweDsKfQoudGFibGUtaGVhZC1jZWxsIHsKICAgIHBhZGRpbmc6IDVweDsKfQoudGFibGUtZmlvLWNlbGwgewogICAgcGFkZGluZy1sZWZ0OiA1cHg7CiAgICBwYWRkaW5nLXJpZ2h0OiA1cHg7Cn0KdGFibGUgewogICAgb3ZlcmZsb3c6IGhpZGRlbjsKfQp0cjpob3ZlciB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTRmZmZhOwp9Cgp0ZDpob3Zlcjo6YWZ0ZXIsCnRoOmhvdmVyOjphZnRlciB7CiAgY29udGVudDogIiI7CiAgcG9zaXRpb246IGFic29sdXRlOwogIGxlZnQ6IDA7CiAgdG9wOiAtNTAwMHB4OwogIGhlaWdodDogMTAwcHg7CiAgd2lkdGg6IDEwMCU7CiAgei1pbmRleDogLTE7Cn0KCi5ncmFkZS1zcGFuIHsKICAgIGRpc3BsYXk6IGJsb2NrOwogICAgYm94LXNpemluZzogYm9yZGVyLWJveDsKICAgIHdpZHRoOiAxMDAlOwogICAgaGVpZ2h0OiAyNXB4Owp9CgouZ3JhZGUtaW5wdXQgewogICAgcG9zaXRpb246IGNlbnRlcjsKICAgIHdpZHRoOiA1MHB4OwogICAgaGVpZ2h0OiAyNXB4Owp9Cg=="},{"version":3,"sources":["TableGenerator.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"TableGenerator.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div class=\"table-generator\">\n        <b-card>\n            <b-card-body style=\"text-align: center\">\n                <div class=\"mb-3\">\n                    <b-form-select style=\"width: 14vw; display: inline\" v-model=\"choosed_column_type\">\n                        <b-form-select-option v-for=\"type in store.state.col_types\" :key=\"type\" v-bind:value=\"type\">{{type}}</b-form-select-option>\n                    </b-form-select>\n                    <b-form-input class=\"ml-5\" style=\"width: 14vw; display: inline\" v-model=\"custom_column_type\" v-show=\"choosed_column_type === 'Свой вариант'\" type='text' placeholder='Укажите свой вариант'/>\n                </div>\n                <b-form-group>\n                    <b-button squared variant=\"outline-dark\" @click=\"add_column\" class=\"mr-3\">Добавить столбец</b-button>\n                    <b-button squared variant=\"outline-dark\" @click=\"delete_column\" class=\"mr-3\">Удалить столбец</b-button>\n                    <b-button squared variant=\"outline-dark\" @click=\"save_table\" class=\"mr-3\">Сохранить таблицу</b-button>\n                    <b-button squared variant=\"outline-dark\" @click=\"\" class=\"mr-3\">Скачать файл (.xls)</b-button>\n                </b-form-group>\n            </b-card-body>\n        </b-card>\n        <b-card>\n            <b-card-body>\n                <div class=\"table-wrapper\">\n                    <table border=\"2\" style=\"margin: auto\" ref=\"grades_table\">\n                        <thead>\n                            <tr>\n                                <th rowspan=\"2\">\n                                    ФИО\n                                </th>\n                                <th v-for=\"(num, name) in grades_types\" :key=\"name\" :colspan=\"num\" class=\"table-head-cell\">\n                                    {{name}}\n                                </th>\n                            </tr>\n                            <tr>\n                                <template v-for=\"(num, name) in grades_types\">\n                                    <th v-for=\"n in num\" class=\"table-grade-cell\">\n                                        № {{n}}\n                                    </th>\n                                </template>\n                            </tr>\n                        </thead>\n                        <tbody>\n\n                            <tr v-for=\"student in students\">\n                               <td class=\"table-fio-cell\">\n                                    {{student.fio}}\n                               </td>\n                                <template v-for=\"grade_type in student.grades\">\n                                    <td v-for=\"grade in grade_type\">\n                                        <div v-show=\"current_grade !== grade.id\">\n                                            <span @mouseenter=\"current_grade = grade.id\" class=\"grade-span\">{{grade.grade_value}}</span>\n                                        </div>\n                                        <b-input class=\"grade-input\"\n                                                 v-show=\"current_grade === grade.id\"\n                                                 v-model=\"grade.grade_value\"\n                                                 @mouseleave=\"current_grade = ''\"\n                                                 @keyup.enter=\"current_grade = ''\"/>\n                                    </td>\n                                </template>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </b-card-body>\n\n        </b-card>\n\n    </div>\n</template>\n\n<script>\n    import axios from 'axios'\n    import store from '../store'\n\n    export default {\n        name: \"TableGenerator\",\n        components: {},\n        props: ['table_data'],\n        data() {\n            return {\n                store: store,\n                table_id: '',\n                students: '',\n                grades_types: '',\n                selected_column_type: '',\n                choosed_column_type: '',\n                custom_column_type: '',\n                current_grade: '',\n            }\n        },\n        methods: {\n            add_column: function () {\n                let _t = this\n\n                if (_t.choosed_column_type === 'Свой вариант') {\n                    if (_t.custom_column_type !== '') {\n                        _t.selected_column_type = _t.custom_column_type\n                    }\n                }\n                else {_t.selected_column_type = _t.choosed_column_type}\n\n                for (let [key, value] of Object.entries(_t.grades_types)) {\n                    if (key === this.selected_column_type) {\n                        _t.grades_types[key] +=1\n                    }\n                }\n                if (_t.grades_types[_t.selected_column_type] === undefined) {\n                    _t.$set(_t.grades_types, _t.selected_column_type, 1)\n                    let ordered_types = {}\n                    Object.keys(_t.grades_types).sort().forEach(function(key) {\n                        ordered_types[key] = _t.grades_types[key];\n                    })\n                    _t.grades_types = ordered_types\n                }\n                let data = {action: 'add_column', params: {table_id: _t.table_id, column_type: _t.selected_column_type}}\n                axios({url: `http://localhost:6060/api/table_creator/`, data: data, method: 'POST'})\n                .then(resp => {\n                    if (resp.data.result === 'ok') {\n                        let new_grades = resp.data.params.new_grades\n                        for (let student of _t.students) {\n                            if (!(_t.selected_column_type in student.grades)) {\n                                // student.grades[_t.selected_column_type] = []\n                                _t.$set(student.grades, _t.selected_column_type, [])\n                            }\n                            student.grades[_t.selected_column_type].push(new_grades[student.id])\n                        }\n                    }\n                    else {\n                        console.log(resp.data.params.message)\n                    }\n                })\n            },\n            delete_column: function () {\n                var _t = this\n\n                if (_t.choosed_column_type === 'Свой вариант') {\n                    if (_t.custom_column_type !== '') {\n                        _t.selected_column_type = _t.custom_column_type\n                    }\n                }\n                else {_t.selected_column_type = _t.choosed_column_type}\n\n                if (_t.selected_column_type in _t.grades_types) {\n                     let deleted_grades_ids = []\n                     for (let student of _t.students) {\n                         let last_grade_in_type = student.grades[_t.selected_column_type][student.grades[_t.selected_column_type].length - 1]\n                         let last_grade_in_type_id = last_grade_in_type.id\n                         deleted_grades_ids.push(last_grade_in_type_id)\n                     }\n                     let data = {action: 'delete_column', params: {table_id: _t.table_id, grades_ids: deleted_grades_ids}}\n                     axios({url: `http://localhost:6060/api/table_creator/`, data: data, method: 'POST'})\n                    .then(resp => {\n                        if (resp.data.result === 'ok') {\n                            for (let student of _t.students) {\n                                student.grades[_t.selected_column_type].pop()\n                                if (student.grades[_t.selected_column_type] <= 0) delete student.grades[_t.selected_column_type]\n                            }\n                            for (let [key, value] of Object.entries(_t.grades_types)) {\n                                if (key === _t.selected_column_type) {\n                                    _t.grades_types[key] -=1\n                                    if (_t.grades_types[key] <= 0) {\n                                        delete _t.grades_types[key]\n                                    }\n                                }\n                            }\n                        }\n                        else {\n                            console.log(resp.data.params.message)\n                        }\n                    })\n                }\n            },\n            save_table: function() {\n                let all_grades = {}\n                for (let student of this.students) {\n                    for (let type in student.grades) {\n                        for (let grade of student.grades[type])\n                        all_grades[grade.id] = grade.grade_value\n                    }\n                }\n              let data = {action: 'save_table', params: {table_id: this.table_id, all_grades: all_grades}}\n              axios({url: `http://localhost:6060/api/table_creator/`, data: data, method: 'POST'})\n                .then(resp => {\n                    if (resp.data.result === 'ok') {\n                        this.make_toast('Сохранение', 'Таблица сохранена')\n                    }\n                    else {\n                        this.make_toast('Сохранение', 'Ошибка при сохранении')\n                        console.log(resp.data.params.message)\n                    }\n                })\n\n            },\n            //additional functions\n            compare_grades: function (a, b) {\n                if (a.grade_type < b.grade_type)\n                    return -1\n                if (a.grade_type > b.grade_type)\n                    return 1\n                return 0\n            },\n            make_toast: function (event_type, message, append=false) {\n                this.$bvToast.toast(message, {\n                    title: event_type,\n                    autoHideDelay: 5000,\n                    appendToast: append\n                })\n            }\n        },\n        created() {\n            this.table_id = this.table_data.id\n            this.students = this.table_data.students_and_grades\n            this.grades_types = this.table_data.grades_types\n        }\n    }\n\n\n</script>\n\n<style scoped>\n    .table-wrapper {\n        margin-top: 30px;\n    }\n    .table-grade-cell {\n        min-width: 50px;\n    }\n    .table-head-cell {\n        padding: 5px;\n    }\n    .table-fio-cell {\n        padding-left: 5px;\n        padding-right: 5px;\n    }\n    table {\n        overflow: hidden;\n    }\n    tr:hover {\n        background-color: #e4fffa;\n    }\n\n    td:hover::after,\n    th:hover::after {\n      content: \"\";\n      position: absolute;\n      left: 0;\n      top: -5000px;\n      height: 100px;\n      width: 100%;\n      z-index: -1;\n    }\n\n    .grade-span {\n        display: block;\n        box-sizing: border-box;\n        width: 100%;\n        height: 25px;\n    }\n\n    .grade-input {\n        position: center;\n        width: 50px;\n        height: 25px;\n    }\n</style>"]}]}